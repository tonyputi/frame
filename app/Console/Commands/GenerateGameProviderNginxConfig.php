<?php

namespace App\Console\Commands;

use Illuminate\Support\Str;
use Illuminate\Console\Command;
use App\Models\Booking;
use Symfony\Component\Process\Process;
use Illuminate\Support\Facades\Storage;
use Symfony\Component\Process\Exception\ProcessFailedException;

class GenerateGameProviderNginxConfig extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'game-providers:config';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Generate nginx configuration';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return int
     */
    public function handle()
    {
        $header = "# THIS FILE IS AUTOGENERATED BY " . Str::upper(config('app.name')) . ". PLEASE DON'T EDIT BY HAND!";

        $directory = 'nginx';
        $filepath = "{$directory}/game-providers.conf";

        $storage = Storage::disk('local');
        // create directory storage/app/nginx is does not exists
        $storage->makeDirectory($directory);
        $storage->put($filepath, "{$header}\r\n");

        $bookings = Booking::current()->get();
        $bookings->each(function($booking) use($storage, $filepath) {
            $storage->append($filepath, $booking->gameProvider->nginxConfig);
        });

        // validate nginx configuration
        // $this->validateConfiguration();

        // reload nginx configuration
        // $this->reloadConfiguration();

        // set current processed bookings as active
        Booking::whereIn('id', $bookings->pluck('id'))->update(['is_active' => true]);

        // send slack notification
        return 0;
    }

    protected function validateConfiguration()
    {
        // check if nginx -t command is success
        $process = new Process(['nginx', '-t']);
        $process->run();
        if (!$process->isSuccessful()) {
            throw new ProcessFailedException($process);
        }
        $this->info($process->getOutput());
    }

    protected function reloadConfiguration()
    {
        $process = new Process(['sudo', 'nginx', '-s', 'reload']);
        $process->run();
        if (!$process->isSuccessful()) {
            throw new ProcessFailedException($process);
        }
        $this->info($process->getOutput());
    }
}
