<?php

namespace App\Console\Commands;

use App\Models\Booking;
use Illuminate\Support\Str;
use App\Models\GameProvider;
use Illuminate\Console\Command;
use Symfony\Component\Process\Process;
use Illuminate\Support\Facades\Storage;
use Symfony\Component\Process\Exception\ProcessFailedException;

class GenerateGameProviderNginxConfig extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'game-providers:config';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Generate nginx configuration';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return int
     */
    public function handle()
    {
        $header = "# THIS FILE IS AUTOGENERATED BY " . Str::upper(config('app.name')) . ". PLEASE DON'T EDIT BY HAND!";

        $directory = 'nginx';
        $filepath = "{$directory}/game-providers.conf";

        // checking if there are booking not yet processed/applied
        if(!Booking::current()->active(false)->exists()) {
            $this->info('Nothing to do');
            return 0;
        }

        $storage = Storage::disk('local');
        // create directory storage/app/nginx is does not exists
        $storage->makeDirectory($directory);
        // put header on nginx config
        $storage->put($filepath, "{$header}\r\n");

        GameProvider::with('currentBooking.user')->each(function($gameProvider) use($storage, $filepath) {
            if($gameProvider->nginxConfig) {
                $storage->append($filepath, $gameProvider->nginxConfig);    
            }
        });

        // $bookings = Booking::current()->get();
        // $bookings->each(function($booking) use($storage, $filepath) {
        //     $storage->append($filepath, $booking->gameProvider->nginxConfig);
        // });

        // if nginx config is already applied than skip
        // if one of booking has applied at == null than reload

        // validate nginx configuration
        // $this->validateConfiguration();

        // reload nginx configuration
        // $this->reloadConfiguration();

        // set current processed bookings as active
        // Booking::whereIn('id', $bookings->pluck('id'))->update([
        //     'is_active' => true,
        //     'applied_at' => now()
        // ]);

        // send slack notification
        return 0;
    }

    /**
     * Validate nginx configuration
     *
     * @return void
     */
    protected function validateConfiguration()
    {
        // check if nginx -t command is success
        $process = new Process(['nginx', '-t']);
        $process->run();
        if (!$process->isSuccessful()) {
            throw new ProcessFailedException($process);
        }
        $this->info($process->getOutput());
    }

    /**
     * Reload nginx configuration
     *
     * @return void
     */
    protected function reloadConfiguration()
    {
        $process = new Process(['sudo', 'nginx', '-s', 'reload']);
        $process->run();
        if (!$process->isSuccessful()) {
            throw new ProcessFailedException($process);
        }
        $this->info($process->getOutput());
    }
}
