<?php

namespace App\Console\Commands;

use Illuminate\Support\Str;
use App\Models\GameProvider;
use Illuminate\Console\Command;
use App\Models\GameProviderQueue;
use Symfony\Component\Process\Process;
use Illuminate\Support\Facades\Storage;
use Symfony\Component\Process\Exception\ProcessFailedException;

class GenarateGameProviderNginxConfig extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'game-providers:config';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Generate nginx configuration';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return int
     */
    public function handle()
    {
        $header = "# THIS FILE IS AUTOGENERATED BY " . Str::upper(config('app.name')) . ". PLEASE DON'T EDIT BY HAND!";

        $directory = 'nginx';
        $filepath = "{$directory}/game-providers.conf";

        $storage = Storage::disk('local');
        // create directory storage/app/nginx is does not exists
        $storage->makeDirectory($directory);
        $storage->put($filepath, $header);

        // $gameProviders = GameProvider::all();
        // $gameProviders->each(function($gameProvider) use($storage, $filepath) {
        //     if($gameProvider->nginxConfig) {
        //         $storage->append($filepath, NULL);
        //         $storage->append($filepath, $gameProvider->nginxConfig);
        //     }
        // });

        $bookings = GameProviderQueue::current()->active(false)->get();
        $bookings->each(function($booking) use($storage, $filepath) {
            $storage->append($filepath, NULL);
            $storage->append($filepath, $booking->gameProvider->nginxConfig);
        });

        // check if nginx -t command is success
        $process = new Process(['nginx', '-t']);
        $process->run();
        if (!$process->isSuccessful()) {
            throw new ProcessFailedException($process);
        }
        $this->info($process->getOutput());
        // reload nginx config
        $process = new Process(['sudo', 'nginx', '-s', 'reload']);
        $process->run();
        if (!$process->isSuccessful()) {
            throw new ProcessFailedException($process);
        }
        // send slack notification
        return 0;
    }
}
